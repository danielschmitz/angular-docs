[{"breadcrumbs":["Bem Vindo"],"pageType":"guide","title":"Bem Vindo","section":"","route":"bem-vindo","content":"It's time to write some awesome docs!"},{"breadcrumbs":["Conceitos Fundamentais","Instalação"],"pageType":"guide","title":"Instalação","section":"Instalando o node","route":"conceitos-fundamentais/instalacao","fragment":"instalando-o-node","content":"O único requisito para se usar Angular é ter o Node instalado. Você pode acessar a página oificial do Node e instalar a última versão LTS. Após instalar o node, o comando npm também estará disponível. Com ele podemos instalar o angular globalmente."},{"breadcrumbs":["Conceitos Fundamentais","Instalação"],"pageType":"guide","title":"Instalação","section":"Instalando Angular","route":"conceitos-fundamentais/instalacao","fragment":"instalando-angular","content":"A instalação do Angular é feito através do comando:"},{"breadcrumbs":["Conceitos Fundamentais","Instalação"],"pageType":"guide","title":"Instalação","section":"Instalando Angular 15","route":"conceitos-fundamentais/instalacao","fragment":"instalando-angular-15","content":"Caso precise instalar o angular em uma versão específica, vc pode usar o comando:"},{"breadcrumbs":["Conceitos Fundamentais","Instalação"],"pageType":"guide","title":"Instalação","section":"Criando um novo projeto","route":"conceitos-fundamentais/instalacao","fragment":"criando-um-novo-projeto","content":"Após a instalação, pode-se usar o comando ng new para criar um novo projeto."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"","route":"conceitos-fundamentais/componentes-templates","content":"No Angular, componentes são a base da arquitetura de uma aplicação. Eles são responsáveis por controlar uma parte da interface do usuário (UI) e são compostos por três partes principais: o template (HTML), a classe (TypeScript) e os metadados (decorators). Já os templates são usados para definir a estrutura HTML que será renderizada na tela, podendo ser criados de forma inline (dentro do componente) ou externa (em um arquivo separado). Além disso, a interpolação de dados é uma das formas mais simples de exibir dados dinâmicos no template."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"","route":"conceitos-fundamentais/componentes-templates","content":"Abaixo, vamos explorar cada um desses tópicos com exemplos práticos."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"1. Criação de Componentes com Angular CLI","route":"conceitos-fundamentais/componentes-templates","fragment":"1-criação-de-componentes-com-angular-cli","content":"O Angular CLI (Command Line Interface) é uma ferramenta poderosa que facilita a criação e gerenciamento de componentes. Para criar um novo componente, basta usar o comando ng generate component ou sua forma abreviada ng g c."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Explicação:","route":"conceitos-fundamentais/componentes-templates","fragment":"explicação","content":"Quando você cria um componente com o Angular CLI, ele gera automaticamente os arquivos necessários (TypeScript, HTML, CSS e testes) e atualiza o módulo principal da aplicação para incluir o novo componente."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 1: Criando um componente chamado ","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-1-criando-um-componente-chamado-meu-componente","content":"meu-componente"},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 1: Criando um componente chamado ","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-1-criando-um-componente-chamado-meu-componente","content":"Isso criará uma pasta chamada meu-componente com os seguintes arquivos:"},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 1: Criando um componente chamado ","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-1-criando-um-componente-chamado-meu-componente","content":"meu-componente.component.ts (classe do componente)meu-componente.component.html (template externo)meu-componente.component.css (estilos)meu-componente.component.spec.ts (testes)"},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 2: Criando um componente com um prefixo personalizado","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-2-criando-um-componente-com-um-prefixo-personalizado","content":"Isso criará um componente dentro da pasta shared com o prefixo app no seletor (app-meu-componente)."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"2. Uso de Templates Inline vs. Templates Externos","route":"conceitos-fundamentais/componentes-templates","fragment":"2-uso-de-templates-inline-vs-templates-externos","content":"No Angular, os templates podem ser definidos de duas formas: inline (diretamente no arquivo TypeScript) ou externos (em um arquivo HTML separado)."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Explicação:","route":"conceitos-fundamentais/componentes-templates","fragment":"explicação-1","content":"Templates Inline: Úteis para componentes simples, onde o HTML é curto e não requer um arquivo separado. Eles são definidos diretamente no decorator @Component usando a propriedade template.Templates Externos: Recomendados para componentes mais complexos, onde o HTML é extenso. Eles são definidos em um arquivo .html separado e referenciados no decorator @Component usando a propriedade templateUrl."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 1: Template Inline","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-1-template-inline","content":"Aqui, o HTML é definido diretamente na propriedade template."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 2: Template Externo","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-2-template-externo","content":"Neste caso, o HTML está em um arquivo separado chamado externo-template.component.html."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"3. Interpolação de Dados ( {{ ... }} )","route":"conceitos-fundamentais/componentes-templates","fragment":"3-interpolação-de-dados-----","content":"A interpolação de dados é uma das formas mais comuns de exibir dados dinâmicos no template. Ela usa a sintaxe {{ }} para vincular propriedades da classe do componente ao template."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Explicação:","route":"conceitos-fundamentais/componentes-templates","fragment":"explicação-2","content":"A interpolação permite que você insira valores de variáveis, expressões ou chamadas de métodos diretamente no HTML. O Angular avalia automaticamente o conteúdo dentro das chaves e o exibe no template."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 1: Exibindo uma variável","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-1-exibindo-uma-variável","content":"No template, {{ nome }} será substituído por \"João\"."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Exemplo 2: Usando uma expressão","route":"conceitos-fundamentais/componentes-templates","fragment":"exemplo-2-usando-uma-expressão","content":"Aqui, {{ 2 + 2 }} será avaliado como 4."},{"breadcrumbs":["Conceitos Fundamentais","Componentes e Templates"],"pageType":"guide","title":"Componentes e Templates","section":"Conclusão","route":"conceitos-fundamentais/componentes-templates","fragment":"conclusão","content":"Os componentes e templates são fundamentais no Angular, permitindo a criação de interfaces dinâmicas e reutilizáveis. Com o Angular CLI, a criação de componentes é simplificada, enquanto a escolha entre templates inline e externos oferece flexibilidade para diferentes cenários. A interpolação de dados, por sua vez, é uma ferramenta poderosa para exibir informações dinâmicas de forma simples e eficiente. Dominar esses conceitos é essencial para construir aplicações Angular robustas e bem estruturadas."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","content":"No Angular, o ciclo de vida de um componente é uma série de eventos que ocorrem desde a criação até a destruição de um componente. Esses eventos permitem que os desenvolvedores executem lógicas específicas em momentos cruciais do ciclo de vida do componente. No Angular 15, três dos principais eventos do ciclo de vida são: OnInit, OnAfterViewInit e OnDestroy. Vamos explorar cada um deles com exemplos práticos."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"1. ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"1-oninit","content":"OnInit"},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"1. ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"1-oninit","content":"O evento OnInit é disparado quando o componente é inicializado. Ele é chamado uma vez, logo após o Angular terminar de configurar o componente e suas propriedades de entrada (@Input). Esse é o momento ideal para realizar inicializações, como carregar dados de uma API ou configurar valores iniciais."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo","content":"Suponha que temos um componente UserProfileComponent que exibe informações de um usuário. Essas informações são carregadas de uma API quando o componente é inicializado."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo","content":"Neste exemplo, o método ngOnInit é usado para carregar os dados do usuário assim que o componente é inicializado. Isso garante que a lógica de carregamento seja executada no momento certo."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"2. ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"2-onafterviewinit","content":"OnAfterViewInit"},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"2. ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"2-onafterviewinit","content":"O evento OnAfterViewInit é disparado após o Angular inicializar a view do componente e suas views filhas. Esse é o momento ideal para interagir com o DOM ou realizar operações que dependem da renderização completa do template."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo-1","content":"Imagine um componente ChartComponent que renderiza um gráfico usando uma biblioteca de terceiros que precisa acessar um elemento do DOM."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo-1","content":"Aqui, o método ngAfterViewInit é usado para garantir que o gráfico seja renderizado apenas após o elemento "},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo-1","content":" estar disponível no DOM."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"3. ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"3-ondestroy","content":"OnDestroy"},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"3. ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"3-ondestroy","content":"O evento OnDestroy é disparado quando o componente é destruído, ou seja, quando ele é removido do DOM. Esse é o momento ideal para realizar limpezas, como cancelar subscrições de observables ou liberar recursos para evitar memory leaks."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo-2","content":"Suponha que temos um componente NotificationComponent que se inscreve em um serviço de notificações para exibir alertas em tempo real. Quando o componente é destruído, precisamos cancelar a subscrição para evitar vazamentos de memória."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Exemplo:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"exemplo-2","content":"Neste exemplo, o método ngOnDestroy é usado para cancelar a subscrição do observable, garantindo que nenhuma lógica desnecessária continue sendo executada após o componente ser destruído."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Situação Prática: Resolvendo um Problema com ","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"situação-prática-resolvendo-um-problema-com-ngafterviewinit","content":"ngAfterViewInit"},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Problema:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"problema","content":"Imagine um componente ModalComponent que exibe um modal na tela. O modal precisa ser focado automaticamente quando é aberto para garantir a acessibilidade. No entanto, o foco só pode ser aplicado após o modal ser renderizado no DOM."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Solução:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"solução","content":"Podemos usar o ngAfterViewInit para garantir que o foco seja aplicado apenas após o modal estar completamente renderizado."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Solução:","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"solução","content":"Neste caso, o método ngAfterViewInit resolve o problema de acessibilidade, garantindo que o modal receba o foco no momento certo."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Diagrama","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"diagrama","content":"sequenceDiagram\nparticipant Angular as Angular Framework\nparticipant Component as Componente Angular\nparticipant DOM as DOM (Document Object Model)\n\nAngular->>Component: Cria o componente\nComponent->>Component: ngOnInit()\nNote over Component: Inicializa dados, carrega informações, etc.\n\nAngular->>DOM: Renderiza a view do componente\nDOM-->>Component: View pronta\nComponent->>Component: ngAfterViewInit()\nNote over Component: Interage com o DOM, renderiza gráficos, etc.\n\nAngular->>Component: Destrói o componente\nComponent->>Component: ngOnDestroy()\nNote over Component: Limpa recursos, cancela subscrições, etc."},{"breadcrumbs":["Conceitos Fundamentais","Ciclo de Vida de um Componente"],"pageType":"guide","title":"Ciclo de Vida de um Componente","section":"Conclusão","route":"conceitos-fundamentais/ciclo-de-vida-de-um-componente","fragment":"conclusão","content":"Os eventos do ciclo de vida de um componente no Angular 15, como OnInit, OnAfterViewInit e OnDestroy, são ferramentas poderosas para gerenciar a lógica de um componente de forma eficiente. Cada evento tem um propósito específico e, quando usado corretamente, pode resolver problemas comuns, como carregamento de dados, interação com o DOM e gerenciamento de recursos. Entender e aplicar esses eventos é essencial para desenvolver componentes robustos e de alta performance."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"","route":"conceitos-fundamentais/data-bind","content":"O Angular oferece várias formas de data binding para conectar o template (HTML) com o componente (TypeScript). O data binding é uma das funcionalidades mais poderosas do Angular, permitindo que você crie aplicações dinâmicas e interativas. Neste manual, vamos explorar os principais tipos de data binding: Interpolação, Property Binding, e Event Binding."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"1. Interpolação","route":"conceitos-fundamentais/data-bind","fragment":"1-interpolação","content":"A interpolação é a forma mais simples de data binding no Angular. Ela permite que você exiba valores de propriedades do componente diretamente no template."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo","content":"Suponha que você tenha uma propriedade title no seu componente:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo","content":"No template, você pode exibir o valor de title usando interpolação:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"2. Property Binding","route":"conceitos-fundamentais/data-bind","fragment":"2-property-binding","content":"O property binding permite que você associe propriedades de elementos HTML a propriedades do componente. Isso é útil quando você deseja definir dinamicamente atributos de elementos HTML, como src, disabled, class, etc."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-1","content":"Suponha que você tenha uma propriedade imageUrl no seu componente:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-1","content":"No template, você pode usar property binding para definir o atributo src de uma imagem:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"3. Event Binding","route":"conceitos-fundamentais/data-bind","fragment":"3-event-binding","content":"O event binding permite que você responda a eventos do DOM, como cliques, teclas pressionadas, movimentos do mouse, etc. Você pode associar métodos do componente a esses eventos."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-2","content":"Suponha que você tenha um método onClick() no seu componente:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-2","content":"No template, você pode usar event binding para chamar o método onClick() quando o botão for clicado:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Resultado:","route":"conceitos-fundamentais/data-bind","fragment":"resultado-2","content":"Quando o botão for clicado, uma mensagem de alerta será exibida."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"4. Two-Way Data Binding","route":"conceitos-fundamentais/data-bind","fragment":"4-two-way-data-binding","content":"O two-way data binding combina property binding e event binding para permitir que você sincronize automaticamente o valor de uma propriedade do componente com um elemento de entrada no template."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-3","content":"Para usar o two-way data binding, você precisa importar o módulo FormsModule no seu módulo principal:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-3","content":"Agora, suponha que você tenha uma propriedade name no seu componente:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-3","content":"No template, você pode usar o two-way data binding para sincronizar o valor de name com um campo de entrada:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-3","content":"Apesar de abordamos o two-way data binding para criar um formulário, esta nao é a melhor forma de criar formulários no Angular. Existe o conceito de Reactive Forms que será abordado em outro tópico, onde é a melhor forma de criar um formulário no angular."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Resultado:","route":"conceitos-fundamentais/data-bind","fragment":"resultado-3","content":"Quando você digitar algo no campo de entrada, o valor da propriedade name será atualizado automaticamente e o texto abaixo do campo será atualizado em tempo real."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"5. Combinando Data Bindings","route":"conceitos-fundamentais/data-bind","fragment":"5-combinando-data-bindings","content":"Você pode combinar diferentes tipos de data binding para criar interfaces de usuário dinâmicas e interativas."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-4","content":"Suponha que você tenha um componente com uma propriedade isDisabled e um método toggleDisabled():"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Exemplo:","route":"conceitos-fundamentais/data-bind","fragment":"exemplo-4","content":"No template, você pode usar property binding para desabilitar um botão com base no valor de isDisabled e event binding para chamar o método toggleDisabled() quando o botão for clicado:"},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Resultado:","route":"conceitos-fundamentais/data-bind","fragment":"resultado-4","content":"O botão será desabilitado ou habilitado com base no valor de isDisabled, e o texto do botão será atualizado dinamicamente."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Conclusão","route":"conceitos-fundamentais/data-bind","fragment":"conclusão","content":"O data binding é uma das funcionalidades mais poderosas do Angular, permitindo que você crie aplicações dinâmicas e interativas com facilidade. Com a interpolação, property binding, event binding e two-way data binding, você pode conectar o template ao componente de forma eficiente e criar interfaces de usuário ricas e responsivas."},{"breadcrumbs":["Conceitos Fundamentais","DataBind"],"pageType":"guide","title":"DataBind","section":"Conclusão","route":"conceitos-fundamentais/data-bind","fragment":"conclusão","content":"Este manual cobre os conceitos básicos de data binding no Angular 15. À medida que você avança no desenvolvimento com Angular, você encontrará situações mais complexas onde esses conceitos serão combinados e expandidos para criar aplicações ainda mais poderosas."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Estrutura de Arquivos e Pastas do Angular 15"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Quando você cria um novo projeto Angular usando o Angular CLI (ng new nome-do-projeto), uma estrutura de pastas e arquivos é gerada automaticamente. Essa estrutura é organizada para facilitar o desenvolvimento, manutenção e escalabilidade do projeto. Vamos detalhar cada parte:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"1. Pastas Principais"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"src/"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"A pasta src/ é o coração do seu projeto Angular. É onde você escreve a maior parte do código."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"app/: Contém os componentes, módulos, serviços e outros arquivos relacionados à lógica da aplicação.app.component.ts: O componente raiz da aplicação.app.module.ts: O módulo raiz da aplicação, onde todos os componentes, diretivas e pipes são declarados.app-routing.module.ts: Configuração de rotas da aplicação.components/: Pasta para armazenar componentes adicionais.services/: Pasta para armazenar serviços.models/: Pasta para armazenar interfaces ou classes de modelos de dados.guards/: Pasta para armazenar guardas de rota.interceptors/: Pasta para armazenar interceptores HTTP.assets/: Armazena arquivos estáticos, como imagens, ícones, fonts e JSONs.environments/: Contém arquivos de configuração para diferentes ambientes (ex: environment.ts para desenvolvimento e environment.prod.ts para produção).styles.css ou styles.scss: Arquivo global de estilos da aplicação.main.ts: Ponto de entrada da aplicação, onde o módulo raiz é inicializado.index.html: O arquivo HTML principal que serve como base para a aplicação.favicon.ico: Ícone da aplicação exibido na aba do navegador."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"node_modules/"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Contém todas as dependências do projeto instaladas via npm ou yarn. Essa pasta é gerada automaticamente ao rodar npm install."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"e2e/"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Pasta para testes end-to-end (E2E) usando ferramentas como Protractor ou Cypress."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"dist/"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Gerada automaticamente ao rodar ng build. Contém os arquivos compilados e otimizados para produção."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"2. Arquivos de Configuração"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"angular.json"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Arquivo de configuração principal do Angular CLI. Define configurações como:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"projects: Configurações específicas do projeto.architect: Configurações de build, serve, test, etc.styles e scripts: Arquivos globais de estilos e scripts."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"package.json"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Lista todas as dependências do projeto e scripts npm, como:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"start: Inicia o servidor de desenvolvimento.build: Compila o projeto para produção.test: Executa testes unitários."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"tsconfig.json"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Configurações do TypeScript para o projeto, como:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"target: Versão do JavaScript para compilação.module: Sistema de módulos (ex: ESNext).paths: Mapeamento de caminhos para imports."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"tsconfig.app.json"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Configurações específicas do TypeScript para a aplicação."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"tsconfig.spec.json"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"Configurações específicas do TypeScript para testes."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":"","route":"conceitos-fundamentais/estrutura-de-arquivos","content":"tslint.json"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"Configurações do TSLint para análise estática do código (substituído pelo ESLint em versões mais recentes)."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":".browserslistrc"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"Define as versões de navegadores suportadas pelo projeto."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":".editorconfig"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"Configurações de estilo de código para manter a consistência entre diferentes editores."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":".gitignore"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"Lista de arquivos e pastas ignorados pelo Git."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"3. Outros Arquivos Importantes"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"karma.conf.js"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"Configurações do Karma para testes unitários."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"tslintjson-opcional","content":"protractor.conf.js"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Configurações do Protractor para testes E2E."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"README.md"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Documentação básica do projeto."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"LICENSE"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Arquivo de licença do projeto."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"4. Estrutura de um Componente Angular"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Dentro da pasta app/, cada componente geralmente tem a seguinte estrutura:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"nome-do-componente.component.ts: Lógica do componente.nome-do-componente.component.html: Template do componente.nome-do-componente.component.css ou .scss: Estilos do componente.nome-do-componente.component.spec.ts: Testes unitários do componente."},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Exemplo:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"5. Estrutura de um Módulo Angular"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Um módulo Angular (NgModule) organiza componentes, diretivas, pipes e serviços. Exemplo:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"6. Estrutura de um Serviço Angular"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Serviços são usados para lógica reutilizável e compartilhada. Exemplo:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"7. Estrutura de Rotas"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"O arquivo app-routing.module.ts define as rotas da aplicação:"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"Conclusão"},{"breadcrumbs":["Conceitos Fundamentais","Estrutura de Arquivos"],"pageType":"guide","title":"Estrutura de Arquivos","section":" (opcional)","route":"conceitos-fundamentais/estrutura-de-arquivos","fragment":"protractorconfjs-opcional","content":"A estrutura de arquivos e pastas do Angular 15 é projetada para ser intuitiva e escalável. Compreender cada parte dessa estrutura é essencial para desenvolver aplicações robustas e bem organizadas. Use este guia como referência para navegar e expandir seu projeto Angular! 🚀"}]